{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SERVER_URL","App","account","setAccount","useState","candidates","setCandidates","newCandidate","setNewCandidate","voterAddress","setVoterAddress","email","setEmail","otp","setOtp","fingerprintData","setFingerprintData","fetchCandidates","async","response","axios","get","data","error","console","useEffect","React","createElement","onClick","window","ethereum","provider","ethers","BrowserProvider","signer","getSigner","getAddress","alert","map","candidate","index","key","name","votes","post","candidateId","vote","id","type","placeholder","value","onChange","e","target","address","verified","fingerprintHash","authenticated","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e3e2c276.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\n\nconst SERVER_URL = \"/api\"; // Replace with your deployed backend URL\n\nfunction App() {\n    // State Variables\n    const [account, setAccount] = useState(null);\n    const [candidates, setCandidates] = useState([]);\n    const [newCandidate, setNewCandidate] = useState(\"\");\n    const [voterAddress, setVoterAddress] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [otp, setOtp] = useState(\"\");\n    // eslint-disable-next-line no-unused-vars\nconst [fingerprintData, setFingerprintData] = useState(null);\n\n\n    // Connect MetaMask\n    const connectMetaMask = async () => {\n        if (window.ethereum) {\n            try {\n                const provider = new ethers.BrowserProvider(window.ethereum);\n                const signer = await provider.getSigner();\n                setAccount(await signer.getAddress());\n            } catch (error) {\n                console.error(\"MetaMask connection failed:\", error);\n            }\n        } else {\n            alert(\"MetaMask not detected!\");\n        }\n    };\n\n    // Fetch Candidates\n    const fetchCandidates = async () => {\n        try {\n            const response = await axios.get(`${SERVER_URL}/candidates`);\n            setCandidates(response.data.candidates);\n        } catch (error) {\n            console.error(\"Error fetching candidates:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchCandidates();\n    }, []);\n\n    // Add Candidate\n    const addCandidate = async () => {\n        try {\n            await axios.post(`${SERVER_URL}/addCandidate`, { name: newCandidate });\n            alert(\"Candidate added successfully!\");\n            fetchCandidates();\n        } catch (error) {\n            console.error(\"Error adding candidate:\", error);\n        }\n    };\n\n    // Add Voter\n    const addVoter = async () => {\n        try {\n            await axios.post(`${SERVER_URL}/addVoter`, { address: voterAddress });\n            alert(\"Voter added successfully!\");\n        } catch (error) {\n            console.error(\"Error adding voter:\", error);\n        }\n    };\n\n    // Cast Vote\n    const vote = async (candidateId) => {\n        try {\n            await axios.post(`${SERVER_URL}/vote`, { candidateId, voterAddress: account });\n            alert(\"Vote cast successfully!\");\n        } catch (error) {\n            console.error(\"Error casting vote:\", error);\n        }\n    };\n\n    // Send OTP\n    const sendOTP = async () => {\n        try {\n            await axios.post(`${SERVER_URL}/sendOTP`, { email });\n            alert(\"OTP sent successfully!\");\n        } catch (error) {\n            console.error(\"Error sending OTP:\", error);\n        }\n    };\n\n    // Verify OTP\n    const verifyOTP = async () => {\n        try {\n            const response = await axios.post(`${SERVER_URL}/verifyOTP`, { email, otp });\n            if (response.data.verified) {\n                alert(\"OTP Verified!\");\n            } else {\n                alert(\"Invalid OTP!\");\n            }\n        } catch (error) {\n            console.error(\"Error verifying OTP:\", error);\n        }\n    };\n\n    // Register Fingerprint\n    const registerFingerprint = async () => {\n        try {\n            const fingerprintHash = \"sample_fingerprint_hash\"; // Replace with actual WebAuthn fingerprint data\n            await axios.post(`${SERVER_URL}/registerFingerprint`, { voterAddress: account, fingerprintHash });\n            alert(\"Fingerprint registered successfully!\");\n        } catch (error) {\n            console.error(\"Error registering fingerprint:\", error);\n        }\n    };\n\n    // Authenticate Fingerprint\n    const authenticateFingerprint = async () => {\n        try {\n            const fingerprintHash = \"sample_fingerprint_hash\"; // Replace with actual WebAuthn fingerprint data\n            const response = await axios.post(`${SERVER_URL}/authenticateFingerprint`, { voterAddress: account, fingerprintHash });\n            if (response.data.authenticated) {\n                alert(\"Fingerprint authenticated successfully!\");\n            } else {\n                alert(\"Fingerprint authentication failed!\");\n            }\n        } catch (error) {\n            console.error(\"Error authenticating fingerprint:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>E-Voting System</h1>\n            <button onClick={connectMetaMask}>\n                {account ? `Connected: ${account}` : \"Connect MetaMask\"}\n            </button>\n\n            <h2>Candidates</h2>\n            <ul>\n                {candidates.map((candidate, index) => (\n                    <li key={index}>\n                        {candidate.name} - {candidate.votes} votes\n                        <button onClick={() => vote(candidate.id)}>Vote</button>\n                    </li>\n                ))}\n            </ul>\n\n            <h2>Admin Panel</h2>\n            <div>\n                <input type=\"text\" placeholder=\"Candidate Name\" value={newCandidate} onChange={(e) => setNewCandidate(e.target.value)} />\n                <button onClick={addCandidate}>Add Candidate</button>\n            </div>\n\n            <div>\n                <input type=\"text\" placeholder=\"Voter Address\" value={voterAddress} onChange={(e) => setVoterAddress(e.target.value)} />\n                <button onClick={addVoter}>Add Voter</button>\n            </div>\n\n            <h2>OTP Authentication</h2>\n            <div>\n                <input type=\"email\" placeholder=\"Enter Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n                <button onClick={sendOTP}>Send OTP</button>\n            </div>\n            <div>\n                <input type=\"text\" placeholder=\"Enter OTP\" value={otp} onChange={(e) => setOtp(e.target.value)} />\n                <button onClick={verifyOTP}>Verify OTP</button>\n            </div>\n\n            <h2>Fingerprint Authentication</h2>\n            <button onClick={registerFingerprint}>Register Fingerprint</button>\n            <button onClick={authenticateFingerprint}>Authenticate Fingerprint</button>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}